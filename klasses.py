# Создаем класс Point -  с большой буквы обязательно 
class Point:
    # Начальные атрибуты класса
    # После добавления конструкторв класа, начальные атрибуты можно убрать, закоментю их
    # x = 0
    # y = 0 

    # Сейчас при создании объекта, кординаты будут 0, 0. Чтобы изначально при создании объекта можно было задавать свои атрибуты,
    # создаем так называемый конструктор класа
    def __init__(self, x, y):
        self.x = x
        self.y = y 

    # Добавляем функцию в клас, Называется метод. Создаем метод cordinates(self) - self обязательный аргумент метода
    def cordinates(self):
        # При обращении к атрибумат класса, обязательно ставим перед ними self - Например : self.x
        print(f'Кординаты: x {self.x}, y {self.y}')

    # Чтобы выводить - print(my_point) объект в красивом виде, создаем метод __repr__, без него вывод будет некрасивый
    # увидим что-то вроде <__main__.Point object at 0x108a16208>.
    def __repr__(self):
        return f'Point x:{self.x}, y:{self.y}'

# # Чтобы использовать клас Point - Создаем объект из класса Point - при изначально заданных атрибутах - 0, 0
# my_point = Point()

# # Вызываем наш метод класса, который распечатает корднаты изначальные
# my_point.cordinates()

# # Обращаемся к атрибутам объекта - Меняем атрибуты (сдвигаем точку)
# my_point.x = 10
# my_point.y = -5

# # Вызов метода класса, с двинутой точкой
# my_point.cordinates()

# Создаме объект с нужными нам параметрами, задаем сами атрибуты класу
my_point = Point(10, 25)
my_point.cordinates()

my_point.x = 10
my_point.y = -5
my_point.cordinates()

print(my_point)